기존의 jdbc의 문제점
- connection -> statement 객체 생성 -> SQL문 전송 -> 결과반환 ->
  close 과정으로 작업한다.
- SQL문이 프로그래밍 코드에 섞여 코드를 복잡하게 사용하게 된다.
- 그로 인해서 유지 보수도 어려워진다.

마이바티스 프레임워크 도입
- SQL문의 가독성을 높여서 사용이 편리하게 만들어 준다.
- 코드와 SQL문을 분리해서 사용 하여 유지 보수도 편리하게 된다.

마이바티스 프레임워크의 특징
- SQL 실행 결과를 자바 빈즈 또는 Map 객체에 매핑해 주는 Persistence 솔루션으로 관리한다.
- SQL문과 프로그래밍 코드를 분리해서 구현 할 수 있다.
- 데이터소스(DataSource)기능과 트랜잭션 처리 기능을 제공

1. SqlMapConfig.xml에 각 기능별로 실행할 SQL문을 SqlMap.xml에 미리 작성한 후 등록 한다.
2. 애플리케이션에서 데이터 베이스와 연동하는데 필요한 데이터를 각각의 매개변수에 저장한 후 
      마이바티스에 전달한다.
3. 애플리케이션에서 요청한 SQL문을 SqlMap.xml에서 선택한다.
4. 전달한 매개변수와 선택한 SQL문을 결합시킨다.
5. 매개변수와 결합된 SQL문을 DBMS에서 실행한다.
6. DBMS에서 반환된 데이터를 애플리케이션에서 제공하는 적당한 매개변수에 저장한 후 반환한다.

http://www.mybatis.org
- products
- mybatis 3 -> download
- mybatis 3.5.4 -> mybatis-3.5.4.zip
- mybatis-3.5.4.zip 압축 해제 및 mybatis-3.5.4.jar 파일
WEB-INF->lib 안에 복사 붙여넣기

마이바티스 관련 파일
- SqlMapConfig.xml : 데이터베이스 연동시 반환되는 값을 저장할 빈이나 트랜잭션, 
    데이터 소스 등 마이바티스 관련 정보를 설정한다.
- member.xml(SqlMap.xml) : 회원 정보 관련 SQL문을 설정한다.


SqlSession 클래스에서 제공하는 메소드
- List selectList(query_id) : id에 대한 select문을 실행
한 후 여러 레코드를 List로 반환 한다.
- List selectList(query_id, 조건) : id에 대한 select문
을 실행하면서 사용되는 조건도 전달한다.
- T selectOne(query_id) : id에 대한 select문을 실행한 후
지정한 타입으로 한 개의 레코드를 반환한다.
- T selectOne(query_id, 조건) : id에 대한 select문을 실
행하면서 사용되는 조건도 전달한다.
- Map<k,v> selectMap(query_id,조건) : id에 대한 select
문을 실행하면서 사용되는 조건도 전달한다. Map 타입으로 레코드를 반
환한다.
- int insert(query_id,Object obj) : id에 대한 insert
문을 실행하면서 obj 객체의 값을 테이블에 추가한다.
- int update(query_id, Object obj) : obj 객체의 값을
조건문의 수정값으로 사용해 id에 대한 update문을 실행한다.
- int delete(query_id, Object obj) : obj 객체의 값을
조건문의 조건값으로 사용해 id에 대한 delete문을 실행한다.












