의존성 주입
- 연관 관계를 개발자가 직접 코딩을 통해 컴포넌트(클래스)에 부여하는 것이 아니라 컨테이너가 
    연관 관계를 직접 규정하는 것이다.
- 코드에서 직접적인 연관 관계가 발생하지 않으므로 각 클래스들의 변경이 자유로워진다.

자바코드로 구현 했을 때 문제점
- 만약 DAO 클래스에서는 오라클과 연동해 기능을 구현
- 오라클에서 MySQL로 데이터베이스 변경이 발생되면 클래스 기능을 일일이 변경해야 한다.
- DAO 를 연결하기 위해서 Service 클래스의 기능도 변경해야 한다.
- 따라서 자바 코드에서 직접 객체를 생성해서 사용하는 것은 복잡한 문제를 일으킬 수 있다.
- 다른 클래스의 변경 사항이 연속적으로 다른 부분에 영향을 미친다면 자바코드에서 직접 
    객체를 생성해서 사용하는 방법을 좋은 방법이 아니다.

의존성 주입 장점
- 클래스들 간의 의존관계를 최소화하여 코드를 단순화 할 수있다.
- 애플리케이션을 더 쉽게 유지 및 관리 할 수 있다.
- 기존 구현 방법은 개발자가 직접 코드안에서 객체의 생성과 소멸을 제어했지만 의존성 주입은 
    객체의 생성, 소멸과 객체 간의 의존관계를 컨테이너가 제어한다.

제어의 역전(Inversion of Control)
- 기존 코드에서는 개발자가 직접 객체를 제어 했지만 스프링 프레임워크에서는 객체의 제어를 스프링이 직접 담당
- IoC의 종류도 여러가지 이며, 일반적으로 스프링에서는 DI로 IoC의 기능을 구현마르로 IoC
    보다는 DI라는 용어를 더 많이 사용한다.

스프링의 의존성 주입 방법
- 생성자에 의한 주입
- setter에 의한 주입

<bean> 태그의 속성
- id : 빈 객체의 고유 이름으로, 빈 id를 이용해 빈에 접근 한다.
- name : 객체의 별칭이다.
- class : 생성할 클래스이다. 패키지이름 포함해서 입력 한다.
- constructor-arg : 생성자를 이용해서 값을 주입할 때 사용
한다.
- property : setter를 이용해서 값을 주입할 때 사용한다.
- lazy-init : 
	빈 생성을 톰캣 실행 시점이 아닌 해당 빈 요청시 메모리에 생성
	할 수 있다.
	true, false, default 세가지 값을 지정할 수 있다.
	설정하지 않거나 false로 설정 시 톰캣 실행시 빈이 생성된다.
	true로 설정 시 해당 빈 사용시 빈이 생성된다.
	
회원 관리 기능 클래스 계층 구조 
MemberService <---- MemberServiceImpl
MemberDAO     <---- MemberDAOImpl
MemberServiceImpl -- 의존관계 --> MemberDAOImpl















