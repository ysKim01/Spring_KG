관점 지향 프로그래밍
- 주기능인 회원등급 구현 할때 로깅 기능, 보안 기능, 트랜잭션 기
능등의 보조 기능을 일일이 구현 해야 한다.
- 규모가 있는 웹 애플리케이션 일 경우 클래스의 메서드마다 이런 작
업을 일일 수작업으로 하기에는 시간도 많이 걸리고 소스 코드도 복잡
해진다.
- 즉, 유지 관리에 문제가 생길 수 있다.
- 관점 지향 프로그래밍을 이용해서 주기능과 보조 기능 분리해 메서드
에 적용한다.

AOP 관련 용어
aspect : 구현하고자 하는 보조 기능을 의미한다.
advice : aspect의 실제 구현체(클래스)를 의미한다. 메서드 
호출을 기준으로 여러 지점에서 실행 된다.
joinpoint : advice를 적용하는 지점을 의미한다. 스프링은 
method 결합점만 제공한다.
pointcut : advice가 적용되는 대상을 지정한다. 패키지이름/
클래스이름/메서드이름을 정규식으로 지정하여 사용한다.
target : advice가 적용되는 클래스를 의미한다.
weaving : advice를 주기능에 적용하는 것을 의미한다.

스프링 프레임워크에서 AOP 기능을 구현하는 방법
- 스프링 프레임워크에서 제공하는 API 를 이용하는 방법
- @Aspect 애너테이션을 이용하는 방법

AOP 기능 구현 과정
1. 타겟(target) 클래스를 지정
2. 어드바이스(advice) 클래스를 지정
3. 설정 파일에 포인트컷(pointcut)을 설정
4. 설정 파일에 어드바이스와 포인트컷을 결합하는 어드바이저를 설정
5. 설정 파일에 스프링의 ProxyFactoryBean 클래스를 이용해
타켓에 어드바이스를 설정
6. getBean()메서드로 빈 객체에 접근해서 사용

스프링 API 에서 제공하는 여러가지 advice 인터페이스
1. 인터페이스 : MethodBeforeAdvice 
- 추상메서드 : before(Method method, Object[] args,
Object target) throws Throwable
- 해당 메서드가 실행되기 전 실행
- Method method : 대상 객체에서 실행된 메서드를 나타내는 메
서드 객체
- Object[] args : 메서드 인자 목록
- Object target : 대상 객체

2. 인터페이스 : AfterReturnningAdvice
- 추상메서드 : void afterReturnning(Object returnvalue,
Method method, Object[] args, Object target)
throws Throwable
- 해당 메서드가 실행된 후 실행
- Object returnValue : 대상 객체의 메서드가 반환하는 값
- Method method : 대상객체에서 실행된 메서드를 나타내는 
메서드 객체
- Object[] args : 메서드 인자 목록
- Object target : 대상 객체

3. 인터페이스 : ThrowsAdvice
- 추상메서드 : void afterThrowing(Method method,
Object[] args, Object target, Exception ex)
- 해당 메서드에서 예외 발생 시 실행
- Method method : 대상객체에서 실행된 메서드를 나타내는 
메서드 객체
- Object[] args : 메서드 인자 목록
- Object target : 대상 객체
- Exception ex : 발생한 예외 타입

4. 인터페이스 : MethodInterceptor
- 추상 메서드 : Object invoke(MethodInvocation 
invocation) throws Throwable
- 해당 메서드의 실행 전/후와 예외 발생시 실행
- MethodInvocation invocation : 대상 객체의 모든 정보
를 담고 있는 객체(호출된 메서드, 인장 등)







