pom.xml 이용해서 마이바티스 설치

log4j
- 로그 기능을 제공하는 오픈 소스 라이브 러리
- 애플리케이션에서 웹 사이트에 접속한 사용자 정보나 각 클래스의 메
서드 호출 시각 등 여러 가지 정보를 로그로 출력해서 관리한다.
- 메이븐에선 프로젝트 생성 시 자동으로 log4j 라이브러리가 설치
된다.

log4j.xml 에 있는 태그
- <Appender> : 로그의 출력 위치를 결정한다. log4j API
문서의 XXXAppender로 끝나는 클래스들의 이름을 보면 출력 위치를
알 수 있다.
- <Layout> : Appender가 어디에 출력할 것인지 결정했다면 어
떤 형식으로 출력할지 출력 레이아웃을 결정한다.
- <Logger> : 로깅 메시지를 Appender에 전달한다. 개발자가
로그 레벨을 이용해 로그 출력 여부를 조정할 수 있다. logger는 로
그 레벨을 가지고 있으며, 로그의 출력 여부는 로그문의 레벨과 로거의
레벨을 가지고 결정한다.

Appender의 여러가지 클래스
- ConsoleAppender : org.apache.log4j.ConsoleAppender
클래스로 콘솔에 로그 메세지를 출력한다.
- FileAppender : org.apache.log4j.FileAppender
클래스로, 파일에 로그 메세지를 출력한다.
- RollingFileAppender : org.apache.log4j.
RollingFileAppender 클래스로, 파일 크기를 일정 기준을 넘
으면 기존파일을 백업 파일로 바꾸고 처음 부터 다시 기럭한다.
- DailyRollingAppender : org.apache.log4j.
DailyRollingFileAppender 클래스로, 설정한 기간 단위로
새 파일을 만들어 로그 메세지 기록한다.

PatternLayout 클래스에서 사용되는 출력 속성
- %p : debug, info, error, fatal 등의 로그 레벨 이름
출력
- %m : 로그 메시지 출력
- %d : 로깅 이벤트 발생 시각 출력
- %F : 로깅이 발생한 프로그램 파일 이름 출력
- %l : 로깅이 발생한 caller의 정보 출력
- %L : 로깅이 발생한 caller의 라인 수 출력
- %M : 로깅이 발생한 method 이름 출력
- %c : 로깅 메시지 앞에 전체 패키지 이름이나 전체 파일 이름출력
  
log4j의 로그 레벨
- FATAL : 시스템 차원에서 심각한 문제가 발생해 애플리케이션 작
동이 불가능할 경우에 해당하는 레벨이다. 일반적을 애플리케이션에서
는 사용할 일이 없다.
- ERROR : 실행 중 문제가 발생한 상태를 나타낸다.
- WARN : 향후 시스템 오류의 원인이 될 수 있는 경고 메시지를 나
타낸다.
- INFO : 로그인, 상태 변경과 같은 실제 애플리케이션 운영과
관련된 정보 메시지를 나타낸다.
- DEBUG : 개발 시 디버깅 용도로 사용한 메시지를 나타낸다.
- TRACE : DEBUG 레벨 보다 상세한 로깅 정보를 출력하기 위해
도입된 레벨이다.

log4j 관련 사이트
- http://logging.apache.org/log4j/1.2/manual.html


[ AOP를 통한 log 출력 ] AOP( Aspect Oriented Programming )
지시자 종류
- execution : 가장 정교한 포인트컷을 만들수 있다. 리턴타입, 패키지, 메서드명, 메서드 매개변수에 포인트컷 지정한다.
- within : 타임패턴 내에 해당하는 모든것들을 포인트컷으로 지정한다.
- bean : bean 이름으로 포인트컷을 지정한다.

어드바이스 동작 시점
- Before : 메서드 실행 전에 동작
- After : 메서드 실행 후에 동작
- After-returning : 메서드가 정상적으로 실행된 후에 동작
- After-throwing : 예외가 발생한 후에 동작
- Around : 메서드 호출 이전, 이후, 예외 발생 등 모든 시점에서 동작

포인트컷 표현식
- execution(public *.*(..)) : public 메서드 실행
- execution(* set*(..)) : 이름이 set으로 시작하는 모든 메서드명 실행
- execution(* get*(..)) : 이름이 get으로 시작하는 모든 메서드명 실행
- execution(* com.xyz.service.AccountService.*(..))
: AccountService 인터페이스의 모든 메서드 실행
- execution(* com.xyz.service.*.*(..)) : service 패키지의 모든 메서드 실행
- execution(* com.xyz.service..*.*(..) : service 패키지와 하위 패키지의 모든 메서드 실행
- within(com.xyz.service.*) : service 패키지 내의 모든 결합점(클래스 포함)
- bean(*Repository) : 이름이 "Repository"로 끝나는 모든 빈
- bean(*) : 모든 빈
- bean(board*) : 이름이 board로 시작하는 모든 빈
- bean(*service)||bean(*Service) : 이름이 service나 Service로 끝나는 모든 빈








